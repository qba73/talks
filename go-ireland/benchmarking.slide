# Benchmarking: First Steps
Go Ireland Meetup
6 Feb 2025

Jakub Jarosz
jakub@jarosz.dev
https://jarosz.dev
@qba73

## Agenda

- Testing vs Benchmarking
- Writing benchmarks
- Running benchmarks
- Interpreting results
- Gaming Time!

.image images/12.png _ 300

## Design Principles

- Make it correct
- Make it readable
- Make it easy to understand
- ...
- Make it **fast** (enough)

.image images/bill.png _ 200


## Go Optimization Principle

*Optimizing Golang code for performance is almost certainly a waste of your time, for several reasons:*

- *Performance doesn't matter*
- *Go is fast*
- *Readability beats speed*

[J. Arundel](https://bitfieldconsulting.com/posts/slower)


## Benchmarking

- Speed ?
- Petrol ?
- Loops ?
- Why ?

.image images/single-race.jpg _ 400

## Testing vs Benchmarking

Test

.code code/benchmarks/bench_test.go /STARTEST OMIT/,/ENDTEST OMIT/ HL11

Benchmark

.code code/benchmarks/bench_test.go /START OMIT/,/END OMIT/ HL12


## Benchmarks

.code code/benchmarks/bench_test.go /STARTTABLE OMIT/,/ENDTABLE OMIT/ 


## Running Benchmarks

- bench

```
go test -run none -bench .
```

```

BenchmarkFoo-8   	19146404	        62.46 ns/op

```


## Running Benchmarks

- benchmem

```
go test -run none -bench . -benchmem
```

```

BenchmarkFoo-8   	18934608	        63.82 ns/op	      80 B/op	       3 allocs/op

```


## Running Benchmarks

- cpu

```
go test -run none -bench . -cpu 2,4,6,8
```

```

BenchmarkIsIsogram-2   	  412042	      2895 ns/op
BenchmarkIsIsogram-4   	  406560	      2905 ns/op
BenchmarkIsIsogram-6   	  402758	      2903 ns/op
BenchmarkIsIsogram-8   	  402938	      2904 ns/op

```


## Running Benchmarks

- benchtime

```
go test -run none -bench . -benchtime 2s -benchmem -cpu 2,4,6,8
```

```

BenchmarkIsIsogram-2   	  833965	      2899 ns/op	    1426 B/op	      16 allocs/op
BenchmarkIsIsogram-4   	  813745	      2894 ns/op	    1426 B/op	      16 allocs/op
BenchmarkIsIsogram-6   	  806353	      2925 ns/op	    1426 B/op	      16 allocs/op
BenchmarkIsIsogram-8   	  804255	      2928 ns/op	    1426 B/op	      16 allocs/op

```


## ShareWith...

.image images/56.png _ 300

## ShareWith v1

.code code/hello/1/hello.go /START OMIT/,/END OMIT/

## ShareWith v2

.code code/hello/2/hello.go /START OMIT/,/END OMIT/

## ShareWith Benchmark

.code code/hello/3/hello_test.go /START OMIT/,/END OMIT/

## ShareWith Benchmark

run benchmark

```shell
go test -run none -bench . -benchmem
```

report

```shell

BenchmarkShareWith-8   	18975690	        62.86 ns/op	      80 B/op	       3 allocs/op

```

Demo

## Let's play: Isogram

An isogram (also known as a "non-pattern word")
is a word or phrase without a repeating letter,
however spaces and hyphens are allowed to
appear multiple times.

.image images/15-isogram.png _ 300


## Isogram v1

.code code/isogram/1/isogram.go /START OMIT/,/END OMIT/


## Isogram v2

.code code/isogram/2/isogram.go /START OMIT/,/END OMIT/


## Isogram v3

.code code/isogram/3/isogram.go /START OMIT/,/END OMIT/


## Isogram v4

.code code/isogram/4/isogram.go /START OMIT/,/END OMIT/

DEMO

## Let's play: Scrabble

.image images/scrabble.png _ 400


## Scrabble v1

.code code/scrabble/2/scrabble.go /START OMIT/,/END OMIT/


## Scrabble v2

.code code/scrabble/3/scrabble.go /START OMIT/,/END OMIT/


## Scrabble v3

.code code/scrabble/4/scrabble.go /START OMIT/,/END OMIT/


## Comparing Benchmarks - Benchstat

.image images/double-race.jpg _ 350


## Comparing Benchmarks - Benchstat

Running benchmarks
```
go test -run none -bench . -benchmem -count=10 > ../v1.txt
go test -run none -bench . -benchmem -count=10 > ../v2.txt
```
Running **benchstat**
```
benchstat v1.txt v2.txt
pkg: github.com/qba73/scrabble

        │    v1.txt    │               v2.txt                │
        │    sec/op    │   sec/op      vs base               │
Score-8   3029.5n ± 1%   298.4n ± 1%  -90.15% (p=0.000 n=10)


        │   v1.txt     │               v2.txt                │
        │  allocs/op   │ allocs/op   vs base                 │
Score-8   63.000 ± 0%   9.000 ± 0%  -85.71% (p=0.000 n=10)
```

[Benchstat](https://pkg.go.dev/golang.org/x/perf/cmd/benchstat)



## Preventing Compiler Optimizations

.code code/isogram/5/isogram_test.go /STARTISO OMIT/,/ENDISO OMIT/

## There is much more...

- Quiet environment
- Managing benchmark loop
- Managing benchmark timer
- Improving benchmark accuracy


## Upcoming book

.image images/cover.png _ 300

[Get the book when it's out](https://jarosz.dev/article/performance-tuning-and-benchmarking/).
